[
  {
    "id": "html-q1",
    "question": "HTML nima va u nima uchun ishlatiladi?",
    "topic": "HTML Basics",
    "description": "HTML veb-sahifalarning strukturasi va mazmunini belgilaydigan standart belgilash (`markup`) tilidir.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "HTML (HyperText Markup Language) veb-sahifadagi elementlarni (sarlavhalar, paragraflar, rasmlar, havolalar va hokazo) tavsiflash uchun `tag`lardan (`<h1>`, `<p>`, `<img>`, `<a>`) foydalanadi. Brauzerlar HTML kodini o'qib, foydalanuvchiga ko'rsatiladigan vizual sahifani yaratadi. U vebning asosiy qurilish bloki hisoblanadi."
      }
    ],
    "codeExamples": [
      {
        "title": "Oddiy HTML Sahifa Strukturasi:",
        "code": [
          "<!DOCTYPE html>",
          "<html>",
          "<head>",
          "  <title>Sahifa Sarlavhasi</title>",
          "</head>",
          "<body>",
          "  <h1>Asosiy Sarlavha</h1>",
          "  <p>Bu birinchi paragraf.</p>",
          "  <a href=\"https://www.google.com\">Google'ga Havola</a>",
          "</body>",
          "</html>"
        ]
      }
    ],
    "interviewAnswer": "HTML veb-sahifalarning strukturasi va mazmunini belgilaydigan standart belgilash tilidir. U `tag`lar yordamida elementlarni (sarlavha, matn, rasm) aniqlaydi va brauzerga sahifani qanday ko'rsatishni aytadi.",
    "keyTerms": [
      {
        "term": "HTML",
        "definition": "HyperText Markup Language - veb sahifa strukturasini belgilovchi til."
      },
      {
        "term": "Markup Language",
        "definition": "Matn ichiga maxsus belgilar (tag'lar) qo'shib, uning strukturasini va ko'rinishini belgilaydigan til."
      },
      {
        "term": "Tag",
        "definition": "HTML elementi nomini (`<tagname>`) belgilovchi belgi."
      },
      {
        "term": "Element",
        "definition": "Boshlang'ich tag, kontent va yopiluvchi tag'dan iborat HTML qismi."
      },
      {
        "term": "Browser",
        "definition": "HTML, CSS, JS kodlarini interpretatsiya qilib, vizual veb-sahifani ko'rsatuvchi dastur."
      }
    ]
  },
  {
    "id": "html-q2",
    "question": "`<div>` va `<span>` `tag`lari o'rtasida qanday farq bor?",
    "topic": "HTML Elements",
    "description": "`div` blok-darajali (yangi qatorni egallaydi), `span` esa inline-darajali (matn ichida qoladi) elementdir.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`div` (blok element) karton qutiga o‘xshaydi: u sahifada paydo bo‘lishi bilan yangi qator ochadi va mavjud barcha gorizontal bo'shliqni egallaydi. U odatda sahifaning katta qismlarini (`section`, `header`, `footer`) guruhlash uchun ishlatiladi."
      },
      {
        "type": "paragraph",
        "content": "`span` (inline element) matn markeriga o‘xshaydi: u matnning ichida, qatorni buzmasdan joylashadi va faqat o‘zining ichidagi kontent egallagan kichik bo‘shliqni oladi. U odatda matn ichidagi so‘zga rang berish yoki `icon` qo‘shish uchun ishlatiladi."
      },
      {
        "title": "Asosiy Xatti-harakat:",
        "type": "list",
        "items": [
          "`<div>` standartda `display: block;`. Yangi qatordan boshlanadi, `width`/`height` oladi.",
          "`<span>` standartda `display: inline;`. Qator ichida qoladi, `width`/`height` olmaydi.",
          "CSS orqali `display` xususiyatini o'zgartirish mumkin."
        ]
      },
      {
        "title": "Qachon Qaysi Biri?",
        "type": "list",
        "items": [
          "`<div>`: Layout bo‘limlari, `card`'lar, `form` gruppalari.",
          "`<span>`: Matn ichidagi so‘zni ajratish, `icon`, `badge`."
        ]
      },
      {
        "type": "paragraph",
        "content": "*Qoida: Katta blok uchun `div`, matn ichidagi qism uchun `span`.*"
      }
    ],
    "codeExamples": [
      {
        "title": "Vizual Farq Misoli",
        "code": [
          "<div style='border:1px solid blue; margin-bottom:5px;'>Bu DIV</div>",
          "<div style='border:1px solid blue;'>Bu ikkinchi DIV</div>",
          "<p>Paragraf <span style='background:lightgreen;'>ichidagi SPAN</span> elementi.</p>"
        ]
      }
    ],
    "interviewAnswer": "`div` blok element: yangi qator ochadi va layout bo‘limlarini o‘rash uchun. `span` inline element: matn ichida qoladi va faqat kichik bo‘lakni belgilaydi.",
    "keyTerms": [
      {
        "term": "Block-level Element",
        "definition": "Yangi qatordan boshlanadigan va odatda to'liq kenglikni egallaydigan element (`div`, `p`)."
      },
      {
        "term": "Inline-level Element",
        "definition": "Matn oqimi ichida qoladigan va faqat o'z kontenti kengligini egallaydigan element (`span`, `a`)."
      },
      {
        "term": "display Property",
        "definition": "Elementning qanday ko'rsatilishini (block, inline, flex, grid) belgilaydigan CSS xususiyati."
      }
    ]
  },
  {
    "id": "html-q3",
    "question": "HTML5 ning asosiy semantik elementlari qaysilar va ular nima uchun muhim?",
    "topic": "HTML5 Semantics",
    "description": "HTML5 sahifa strukturasini yanada aniqroq qilish uchun `<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>`, `<footer>` kabi yangi semantik elementlarni kiritgan.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Semantik elementlar veb-sahifangizning turli qismlariga aniq 'yorliq' (`label`) beradi. Bu 'yorliqlar' kodning ma'nosini bildiradi, `<div>`'lardan farqli o'laroq."
      },
      {
        "title": "Asosiy Elementlar va Vazifalari:",
        "type": "list",
        "items": [
          "`<header>`: Sahifa yoki bo'limning yuqori qismi (logo, sarlavha, navigatsiya).",
          "`<nav>`: Asosiy navigatsiya menyusi.",
          "`<main>`: Sahifaning asosiy, unikal kontenti (har sahifada bitta).",
          "`<article>`: Mustaqil kontent bloki (blog posti, maqola).",
          "`<section>`: Hujjatning mantiqiy bo'limi (odatda sarlavhasi bilan).",
          "`<aside>`: Asosiy kontentga bilvosita bog'liq yon panel (reklama, linklar).",
          "`<footer>`:** Sahifa yoki bo'limning pastki qismi (mualliflik huquqi, aloqa)."
        ]
      },
      {
        "title": "Nima Uchun Muhim?",
        "type": "list",
        "items": [
          "**Kod Tushunarliligi:** Dasturchilar uchun kodni o'qish va tushunish osonlashadi.",
          "**`Accessibility`:** `Screen reader`'lar sahifada osonroq harakatlanishga yordam beradi.",
          "**`SEO`:** Qidiruv tizimlari sahifa strukturasini va muhim kontentni yaxshiroq tushunadi."
        ]
      },
      {
        "type": "paragraph",
        "content": "*Xulosa: Semantik elementlar kodga ma'no qo'shadi, uni hamma uchun tushunarliroq qiladi.*"
      }
    ],
    "codeExamples": [
      {
        "title": "Semantik Struktura Misoli:",
        "code": [
          "<body>",
          "  <header><nav>...</nav></header>",
          "  <main>",
          "    <article><h2>...</h2>...</article>",
          "    <aside>...</aside>",
          "  </main>",
          "  <footer><p>...</p></footer>",
          "</body>"
        ]
      }
    ],
    "interviewAnswer": "Asosiy HTML5 semantik elementlari `<header>`, `<nav>`, `<main>`, `<footer>`, `<article>`, `<section>`, `<aside>` kabilardir. Ular `<div>` o'rniga sahifa qismlariga aniq ma'no beradi. Bu kodni o'qishni osonlashtiradi, `accessibility`'ni va `SEO`'ni yaxshilaydi.",
    "keyTerms": [
      {
        "term": "Semantic HTML",
        "definition": "Elementning ma'nosini aniq ifodalaydigan HTML tag'laridan foydalanish amaliyoti."
      },
      {
        "term": "Accessibility (a11y)",
        "definition": "Veb-saytni imkoniyati cheklangan odamlar ham ishlata olishini ta'minlash."
      },
      {
        "term": "SEO (Search Engine Optimization)",
        "definition": "Veb-saytni qidiruv tizimlari natijalarida yuqoriroq o'rinlarda chiqishi uchun optimallashtirish."
      }
    ]
  },
  {
    "id": "html-q4",
    "question": "`<img>` `tag`ining `alt` atributi nima uchun kerak?",
    "topic": "HTML Attributes",
    "description": "`alt` (alternative text) atributi rasmning matnli tavsifini beradi va bir nechta muhim vazifani bajaradi.",
    "detailedExplanation": [
      {
        "title": "Vazifalari:",
        "type": "list",
        "items": [
          "**Rasm Yuklanmasa:** Agar rasm (`src`) topilmasa yoki yuklanishda xato bo'lsa, brauzer `alt` matnini ko'rsatadi.",
          "**`Accessibility`:** `Screen reader` kabi yordamchi texnologiyalar ko'zi ojiz foydalanuvchilarga rasmda nima tasvirlanganini tushuntirish uchun `alt` matnini o'qiydi. Bu juda muhim!",
          "**`SEO`:** Qidiruv tizimlari rasm mazmunini tushunish va `index`'lash uchun `alt` matnidan foydalanadi."
        ]
      },
      {
        "type": "paragraph",
        "content": "`alt` matni qisqa, lekin rasmning mazmunini aniq tavsiflab berishi kerak. Dekorativ rasmlar uchun bo'sh `alt=\"\"` ishlatilishi mumkin, shunda `screen reader`'lar uni o'tkazib yuboradi."
      }
    ],
    "codeExamples": [
      {
        "title": "Yaxshi `alt` matni:",
        "code": [
          "<img src=\"dog.jpg\" alt=\"Qizil tasma taqqan Labrador kuchugi o'tiribdi\">"
        ]
      },
      {
        "title": "Yomon `alt` matni:",
        "code": ["<img src=\"dog.jpg\" alt=\"rasm\">"]
      },
      {
        "title": "Dekorativ rasm:",
        "code": ["<img src=\"background-pattern.png\" alt=\"\">"]
      }
    ],
    "interviewAnswer": "`alt` atributi rasmning matnli tavsifini beradi. U rasm yuklanmasa ko'rsatiladi, `screen reader`'lar uchun `accessibility`'ni ta'minlaydi va `SEO` uchun muhimdir.",
    "keyTerms": [
      {
        "term": "alt attribute",
        "definition": "`<img>` tag'iga rasmning matnli tavsifini beruvchi atribut."
      },
      {
        "term": "Screen Reader",
        "definition": "Ekrandagi matnni ovoz chiqarib o'qiydigan, ko'zi ojiz foydalanuvchilar uchun yordamchi texnologiya."
      }
    ]
  },
  {
    "id": "html-q5",
    "question": "HTML `form` elementlari qanday ishlaydi, `GET` va `POST` metodlari o'rtasida qanday farq bor?",
    "topic": "HTML Forms",
    "description": "HTML `<form>` elementlari foydalanuvchidan ma'lumot yig'ish va uni serverga `action` atributida ko'rsatilgan manzilga `method` atributida ko'rsatilgan usul (`GET` yoki `POST`) bilan yuborish uchun ishlatiladi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`form` ichidagi `<input>`, `<textarea>`, `<select>` kabi elementlarning `name` atributi muhim. `Submit` qilinganda, ma'lumotlar `name=value` juftliklari sifatida to'planadi."
      },
      {
        "title": "`GET` metodi:",
        "type": "list",
        "items": [
          "Ma'lumotlarni `URL`'ning oxiriga `query string` (`?name=value&...`) sifatida qo'shib yuboradi.",
          "Qidiruv, filtrlash kabi server holatini o'zgartirmaydigan (`idempotent`) amallar uchun.",
          "`URL` uzunligi cheklangan, ma'lumotlar ochiq ko'rinadi (maxfiy ma'lumot uchun emas!).",
          "`Bookmark`/`Cache` qilish mumkin."
        ]
      },
      {
        "title": "`POST` metodi:",
        "type": "list",
        "items": [
          "Ma'lumotlarni `HTTP` so'rovining tanasi (`request body`) ichida yuboradi (`URL`'da ko'rinmaydi).",
          "Server holatini o'zgartiradigan amallar (yangi ma'lumot qo'shish, tahrirlash) yoki maxfiy/katta hajmli ma'lumotlar uchun.",
          "Hajmi deyarli cheklanmagan.",
          "`Bookmark`/`Cache` qilinmaydi."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "GET Formasi:",
        "code": [
          "<form action=\"/search\" method=\"GET\"><input name=\"q\"><button>Qidir</button></form>"
        ]
      },
      {
        "title": "POST Formasi:",
        "code": [
          "<form action=\"/login\" method=\"POST\"><input type=\"password\" name=\"pwd\"><button>Kirish</button></form>"
        ]
      }
    ],
    "interviewAnswer": "`GET` metodi ma'lumotni `URL`'ga qo'shadi (masalan, `?q=search`), qidiruv uchun ishlatiladi, xavfsiz emas va hajmi cheklangan. `POST` metodi ma'lumotni so'rov tanasida (`body`) yuboradi, maxfiy ma'lumotlar (parol) va serverni o'zgartirish uchun ishlatiladi, hajmi cheklanmagan va `URL`'da ko'rinmaydi.",
    "keyTerms": [
      {
        "term": "GET Method",
        "definition": "Forma ma'lumotlarini URL manziliga `query string` sifatida qo'shib yuborish usuli."
      },
      {
        "term": "POST Method",
        "definition": "Forma ma'lumotlarini HTTP so'rovining tanasi (`body`) ichida yuborish usuli."
      },
      { "term": "URL", "definition": "Vebdagi resursning manzili." },
      {
        "term": "Query String",
        "definition": "URL'ning `?` belgisidan keyingi qismi (`kalit=qiymat&...`), GET parametrlarini saqlaydi."
      },
      {
        "term": "Request Body",
        "definition": "HTTP so'rovining qismi, POST metodida forma ma'lumotlarini yuborish uchun."
      },
      {
        "term": "Idempotent",
        "definition": "So'rovni takroran yuborish bir xil natija berishini anglatadi (GET odatda `idempotent`)."
      }
    ]
  },
  {
    "id": "html-q6",
    "question": "`localStorage` va `sessionStorage` o'rtasida qanday farq bor?",
    "topic": "Web Storage",
    "description": "Ikkala `Web Storage API` ham brauzerda ma'lumotlarni (`key-value`) saqlaydi, ammo saqlash muddati va `scope`'i farq qiladi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`localStorage`:** Ma'lumotlarni **doimiy** saqlaydi. Brauzer yopilib ochilsa ham, ma'lumotlar qoladi. Ular faqat `JavaScript` kodi (`localStorage.clear()`) yoki foydalanuvchi `cache`'ni tozalaganda o'chiriladi. Bir `origin` (domen) uchun barcha `tab`larda umumiy."
      },
      {
        "type": "paragraph",
        "content": "**`sessionStorage`:** Ma'lumotlarni **faqat joriy `tab` yoki oyna yopilguncha** saqlaydi. Har bir `tab`ning o'z alohida `sessionStorage`'i bor."
      }
    ],
    "codeExamples": [
      {
        "title": "localStorage:",
        "code": [
          "localStorage.setItem('theme', 'dark');",
          "let theme = localStorage.getItem('theme');"
        ]
      },
      {
        "title": "sessionStorage:",
        "code": [
          "sessionStorage.setItem('tempData', 'abc');",
          "// Tab yopilsa yo'qoladi"
        ]
      }
    ],
    "interviewAnswer": "Asosiy farq saqlash muddatida: `localStorage` doimiy (brauzer yopilsa ham qoladi), `sessionStorage` vaqtinchalik (faqat `tab` ochiq turganda). Shuningdek, `localStorage` bir domen uchun umumiy, `sessionStorage` har bir `tab` uchun alohida.",
    "keyTerms": [
      {
        "term": "localStorage",
        "definition": "Brauzerda ma'lumotlarni doimiy saqlash uchun Web Storage API qismi."
      },
      {
        "term": "sessionStorage",
        "definition": "Brauzerda ma'lumotlarni joriy sessiya (tab) uchun vaqtinchalik saqlash uchun Web Storage API qismi."
      },
      {
        "term": "Web Storage API",
        "definition": "Brauzerda `key-value` ma'lumotlarini saqlash uchun standart API."
      },
      {
        "term": "Origin",
        "definition": "Veb-manzilning protokol, domen va port kombinatsiyasi."
      },
      {
        "term": "Session",
        "definition": "Brauzer tabining yoki oynasining ochiq turgan vaqti."
      }
    ]
  },
  {
    "id": "html-q7",
    "question": "`<!DOCTYPE html>` deklaratsiyasi nima uchun kerak?",
    "topic": "HTML Basics",
    "description": "`<!DOCTYPE html>` HTML faylning eng boshida turadi va brauzerga bu hujjat HTML5 ekanligini bildiradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Bu deklaratsiya texnik jihatdan `tag` emas, balki brauzer uchun ko'rsatma (`instruction`). U brauzerning sahifani qaysi `render mode`'da ko'rsatishini belgilaydi. `<!DOCTYPE html>` (HTML5 uchun) brauzerga sahifani **`standards mode`**'da, ya'ni eng so'nggi veb-standartlariga muvofiq `render` qilishni aytadi."
      },
      {
        "type": "paragraph",
        "content": "Agar `DOCTYPE` ko'rsatilmasa yoki eskirgan turi ko'rsatilsa, brauzer **`quirks mode`**'ga o'tib qolishi mumkin. Bu rejimda brauzer eski, xato standartlarga taqlid qilishga harakat qiladi, bu esa sahifaning turli brauzerlarda har xil ko'rinishiga va kutilmagan `layout` muammolariga olib keladi. Shuning uchun har bir `HTML` hujjati `<!DOCTYPE html>` bilan boshlanishi shart."
      }
    ],
    "interviewAnswer": "Bu brauzerga hujjat HTML5 ekanligini aytadi va uni `standards mode`'da (eng so'nggi standartlar bo'yicha) render qilishni ta'minlaydi, eski `quirks mode`'dan saqlaydi.",
    "keyTerms": [
      {
        "term": "DOCTYPE",
        "definition": "Document Type Declaration - Hujjat turi deklaratsiyasi."
      },
      {
        "term": "Standards Mode",
        "definition": "Brauzerning veb-standartlariga muvofiq render qilish rejimi."
      },
      {
        "term": "Quirks Mode",
        "definition": "Brauzerning eski, nostandart xatti-harakatlarga taqlid qilish rejimi."
      },
      {
        "term": "Render Mode",
        "definition": "Brauzerning sahifani ko'rsatish uchun ishlatadigan qoidalar to'plami."
      }
    ]
  },
  {
    "id": "html-q8",
    "question": "HTML atributlari (`attributes`) nima va bir nechta misol keltiring?",
    "topic": "HTML Attributes",
    "description": "HTML atributlari elementlarga qo'shimcha ma'lumot yoki sozlamalarni beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Atributlar har doim elementning **boshlang'ich `tag`i** ichida yoziladi va odatda `nom=\"qiymat\"` (`name=\"value\"`) juftligi ko'rinishida bo'ladi (ba'zi `boolean` atributlar faqat nomini yozish bilan ham ishlaydi, masalan, `disabled`). Ular elementning turli jihatlarini boshqaradi:"
      },
      {
        "type": "list",
        "items": [
          "**Xususiyatlar:** Elementning asosiy ma'lumotlari (masalan, `<img>` uchun `src` va `alt`, `<a>` uchun `href`).",
          "**Ko'rinish:** Elementning `styling`'i (`style`, `class`).",
          "**Xatti-harakat:** Elementning interaktivligi (`onclick`, `disabled`).",
          "**Identifikatsiya:** Elementni ajratib olish (`id`, `name`).",
          "**`Accessibility`:** Yordamchi texnologiyalar uchun ma'lumot (`role`, `aria-*`)."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Umumiy Atributlar:",
        "code": [
          "<a href=\"https://google.com\" target=\"_blank\">Google (yangi tabda)</a>",
          "<img src=\"logo.png\" alt=\"Sayt Logosi\" width=\"100\">",
          "<div id=\"main\" class=\"container active\">...</div>",
          "<input type=\"text\" name=\"username\" required disabled>"
        ]
      }
    ],
    "interviewAnswer": "Atributlar HTML elementlariga qo'shimcha ma'lumot beradi va boshlang'ich `tag` ichida `nom=\"qiymat\"` ko'rinishida yoziladi. Misollar: `href` (link manzili), `src` (rasm manbai), `alt` (rasm tavsifi), `id` (unikal identifikator), `class` (CSS klassi), `style` (inline stil), `disabled` (elementni o'chirish).",
    "keyTerms": [
      {
        "term": "Attribute",
        "definition": "HTML elementiga qo'shimcha ma'lumot beruvchi nom/qiymat juftligi."
      },
      {
        "term": "Tag",
        "definition": "HTML elementi nomini belgilovchi belgi (`<tagname>`)."
      },
      {
        "term": "Value",
        "definition": "Atributga berilgan qiymat (odatda qo'shtirnoq ichida)."
      },
      {
        "term": "Boolean Attribute",
        "definition": "Mavjudligi `true` qiymatini bildiradigan atribut (masalan, `disabled`, `checked`)."
      }
    ]
  },
  {
    "id": "html-q9",
    "question": "`script` `tag`ining `async` va `defer` atributlari o'rtasida qanday farq bor?",
    "topic": "HTML Scripting",
    "description": "`async` va `defer` tashqi `JavaScript` fayllarini `HTML` `parsing`'ini bloklamasdan yuklash imkonini beradi, ammo ularning ishga tushish vaqti va tartibi farq qiladi.",
    "detailedExplanation": [
      {
        "title": "Standart `<script>` (Atributsiz):",
        "type": "paragraph",
        "content": "Brauzer `script` `tag`iga duch kelishi bilan HTML `parsing`'ini to'xtatadi. Skriptni yuklab oladi va darhol ishga tushiradi. Skript tugamaguncha `parsing` davom etmaydi. Bu 'render-blocking' hisoblanadi."
      },
      {
        "title": "`<script async>`:",
        "type": "paragraph",
        "content": "Skript HTML `parsing` bilan parallel (fon rejimida) yuklanadi. Yuklanishi bilan darhol ishga tushiriladi (bu paytda `parsing` to'xtatilishi mumkin). Bir nechta `async` skriptning ishga tushish tartibi kafolatlanmagan (qaysi biri tezroq yuklansa, o'sha birinchi ishlaydi). DOM bilan ishlashga bog'liq bo'lmagan mustaqil skriptlar (masalan, `analytics`) uchun mos keladi."
      },
      {
        "title": "`<script defer>`:",
        "type": "paragraph",
        "content": "Skript HTML `parsing` bilan parallel (fon rejimida) yuklanadi. Ammo, u butun HTML hujjati `parse` qilinib bo'lguncha ishga tushirilmaydi. Barcha `defer` skriptlar `HTML`'dagi tartibi bo'yicha, `DOMContentLoaded` hodisasi yuz berishidan oldin ishga tushiriladi. DOM'ga bog'liq bo'lgan va ishga tushish tartibi muhim bo'lgan skriptlar uchun eng yaxshi variant hisoblanadi."
      }
    ],
    "interviewAnswer": "Oddiy `<script>` `parsing`'ni bloklaydi. `async` parallel yuklaydi va yuklanishi bilan tartibsiz ishga tushadi (`parsing`'ni to'xtatishi mumkin). `defer` parallel yuklaydi, `parsing` tugaguncha kutadi va keyin HTML'dagi tartibi bo'yicha ishga tushadi. `defer` odatda eng xavfsiz va tavsiya etilgan variantdir.",
    "keyTerms": [
      {
        "term": "async attribute",
        "definition": "`<script>` atributi, skriptni HTML parsing bilan parallel yuklash va yuklanishi bilan ishga tushirishni bildiradi."
      },
      {
        "term": "defer attribute",
        "definition": "`<script>` atributi, skriptni HTML parsing bilan parallel yuklash, lekin parsing tugagandan so'ng ishga tushirishni bildiradi."
      },
      {
        "term": "HTML Parsing",
        "definition": "Brauzerning HTML kodini o'qib, DOM daraxtini qurish jarayoni."
      },
      {
        "term": "Render-blocking",
        "definition": "Brauzerning sahifani ko'rsatishini to'xtatib qo'yadigan resurs (masalan, atributsiz `<script>`)."
      },
      {
        "term": "DOMContentLoaded",
        "definition": "HTML hujjati to'liq yuklanib, parse qilinib bo'lganda yuz beradigan brauzer hodisasi."
      }
    ]
  },
  {
    "id": "html-q10",
    "question": "HTML `Entity` nima va ular qachon ishlatiladi?",
    "topic": "HTML Basics",
    "description": "HTML `Entity`'lar maxsus belgilarni (`<`, `>`, `&`, `©`) HTML kodida to'g'ri ko'rsatish uchun ishlatiladigan kodlardir.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Ba'zi belgilar HTML sintaksisida maxsus ma'noga ega (masalan, `<` `tag`ni boshlaydi). Agar siz bu belgilarni matn sifatida ko'rsatmoqchi bo'lsangiz, ularni `entity` kodlari bilan almashtirishingiz kerak, aks holda brauzer ularni noto'g'ri interpretatsiya qilishi mumkin. Shuningdek, klaviaturada mavjud bo'lmagan belgilarni (©, €, ™) ham `entity`'lar yordamida qo'shish mumkin."
      },
      { "type": "paragraph", "content": "`Entity`'lar ikki xil bo'ladi:" },
      {
        "type": "list",
        "items": [
          "**Nomlangan (`Named Entities`):** O'qilishi oson nomlarga ega (`&lt;`, `&gt;`, `&amp;`, `&nbsp;`, `&copy;`).",
          "**Raqamli (`Numbered Entities`):** Belgining `Unicode` qiymatiga asoslangan (`&#60;`, `&#62;`, `&#38;`, `&#160;`, `&#169;`)."
        ]
      },
      {
        "type": "paragraph",
        "content": "Eng ko'p ishlatiladiganlari `<` (`&lt;`), `>` (`&gt;`), `&` (`&amp;`) va bo'sh joyni sindirmaslik uchun (`non-breaking space`) `&nbsp;` hisoblanadi."
      }
    ],
    "codeExamples": [
      {
        "title": "Misollar:",
        "code": [
          "<p>HTML tag: &lt;p&gt;</p>",
          "<p>Mualliflik huquqi: &copy; 2025</p>",
          "<p>10&nbsp;USD</p>"
        ]
      }
    ],
    "interviewAnswer": "HTML `Entity`'lar maxsus belgilarni (`<`, `>`, `&`, `©`) yoki klaviaturada yo'q belgilarni `HTML` kodida to'g'ri ko'rsatish uchun ishlatiladigan kodlardir (`&nom;` yoki `&#raqam;`). Masalan, `<` belgisini matn sifatida chiqarish uchun `&lt;` ishlatiladi.",
    "keyTerms": [
      {
        "term": "HTML Entity",
        "definition": "HTML'da maxsus belgini ifodalovchi kod (`&...;`)."
      },
      {
        "term": "Character Encoding",
        "definition": "Belgilarni raqamli kodlarga moslashtirish tizimi (masalan, UTF-8)."
      },
      {
        "term": "Unicode",
        "definition": "Dunyo yozuvlaridagi deyarli barcha belgilar uchun unikal raqamli kod beradigan standart."
      },
      {
        "term": "&nbsp;",
        "definition": "Non-breaking space - sindirilmaydigan bo'sh joy uchun HTML entity."
      }
    ]
  },
  {
    "id": "html-q11",
    "question": "`id` va `class` atributlari o'rtasida qanday farq bor?",
    "topic": "HTML Attributes",
    "description": "`id` butun sahifada unikal bo'lishi kerak, `class` esa bir nechta elementga berilishi mumkin.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`id` (Identifier):** Bu atribut elementga butun `HTML` hujjati bo'yicha **unikal** nom beradi. Bir xil `id` qiymatini bir sahifada bir martadan ortiq ishlatish mumkin emas. `id` asosan quyidagilar uchun ishlatiladi:"
      },
      {
        "type": "list",
        "items": [
          "`JavaScript` bilan aniq bir elementni topish (`document.getElementById('myId')`).",
          "Sahifa ichidagi `anchor` (`langar`) havolalarini yaratish (`<a href=\"#section1\">` va `<div id=\"section1\">`).",
          "`<label>`'ni `form` elementi bilan bog'lash (`<label for=\"name\">` va `<input id=\"name\">`).",
          "CSS'da juda yuqori `specificity`'ga ega bo'lgan qoida yaratish (lekin odatda tavsiya etilmaydi)."
        ]
      },
      {
        "type": "paragraph",
        "content": "**`class` (Classification):** Bu atribut elementga bir yoki bir nechta `class` nomini (bo'sh joy bilan ajratilgan) beradi. Bir xil `class` nomini sahifadagi **ko'plab elementlarga** berish mumkin. `class` asosan quyidagilar uchun ishlatiladi:"
      },
      {
        "type": "list",
        "items": [
          "`CSS` bilan bir xil turdagi yoki bir xil ko'rinishga ega bo'lishi kerak bo'lgan elementlar guruhiga stil berish.",
          "`JavaScript` bilan bir nechta elementni topish (`document.getElementsByClassName('myClass')` yoki `document.querySelectorAll('.myClass')`)."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Misol:",
        "code": [
          "<h1 id=\"main-title\">Asosiy Sarlavha</h1>",
          "<p class=\"intro-text featured\">Bu kirish matni.</p>",
          "<button class=\"button primary\">Asosiy</button>",
          "<button class=\"button\">Oddiy</button>"
        ]
      }
    ],
    "interviewAnswer": "`id` butun sahifada unikal bo'lishi kerak va odatda `JavaScript` yoki `anchor link`lar uchun ishlatiladi. `class` esa bir nechta elementga berilishi mumkin va asosan `CSS` bilan stil berish uchun ishlatiladi. Bir element bir nechta `class`ga ega bo'lishi mumkin.",
    "keyTerms": [
      {
        "term": "id attribute",
        "definition": "Elementga sahifa bo'yicha unikal identifikator beruvchi atribut."
      },
      {
        "term": "class attribute",
        "definition": "Elementga bir yoki bir nechta CSS klass nomini beruvchi atribut."
      },
      { "term": "Unique", "definition": "Yagona, takrorlanmas." },
      {
        "term": "Specificity",
        "definition": "CSS qoidasining qanchalik aniq ekanligini va boshqa qoidalardan ustunligini belgilovchi qiymat."
      }
    ]
  },
  {
    "id": "html-q12",
    "question": "HTML5 `data-*` atributlari nima uchun ishlatiladi?",
    "topic": "HTML Attributes",
    "description": "`data-*` atributlari `JavaScript` uchun maxsus (`custom`) ma'lumotlarni `HTML` elementlarida saqlash imkonini beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Ba'zan biz `HTML` elementiga standart atributlar bilan ifodalab bo'lmaydigan qo'shimcha ma'lumotni bog'lashimiz kerak bo'ladi, bu ma'lumot keyinchalik `JavaScript` kodimizda ishlatilishi mumkin (masalan, elementga bog'liq `ID`, holat yoki sozlama). `data-*` atributlari aynan shu maqsadda yaratilgan."
      },
      { "type": "paragraph", "content": "Qoidalar:" },
      {
        "type": "list",
        "items": [
          "Atribut nomi har doim `data-` prefiksi bilan boshlanishi kerak.",
          "Prefiksdan keyingi nom kamida bitta belgidan iborat bo'lishi va katta harflarni ishlatmasligi kerak (agar katta harf ishlatilsa, `JavaScript`'dagi `dataset` obyektida u kichik harfga va oldingi harfdan oldin chiziqcha (`-`) qo'shilgan holda `camelCase`'ga o'giriladi, masalan `data-user-Role` -> `dataset.userRole`).",
          "Qiymat sifatida istalgan `string`'ni ishlatish mumkin."
        ]
      },
      {
        "type": "paragraph",
        "content": "`JavaScript`'da bu atributlarga kirishning eng oson yo'li `HTMLElement.dataset` obyekti orqali. Bu obyekt elementning barcha `data-*` atributlarini `camelCase` nomlari bilan saqlaydi."
      }
    ],
    "codeExamples": [
      {
        "title": "HTML:",
        "code": [
          "<div id=\"product\" data-product-id=\"12345\" data-category=\"electronics\">Noutbuk</div>"
        ]
      },
      {
        "title": "JavaScript:",
        "code": [
          "const productElement = document.getElementById('product');",
          "const productId = productElement.dataset.productId; // '12345'",
          "const category = productElement.dataset.category; // 'electronics'",
          "console.log(`Mahsulot ID: ${productId}, Kategoriya: ${category}`);",
          "// Qiymatni o'zgartirish:",
          "productElement.dataset.stock = 'available';"
        ]
      }
    ],
    "interviewAnswer": "`data-*` atributlari `JavaScript` uchun maxsus ma'lumotlarni `HTML` elementlarida saqlash imkonini beradi. Masalan, `data-user-id=\"123\"`. `JavaScript`'da bu qiymatga `element.dataset.userId` orqali kirish mumkin.",
    "keyTerms": [
      {
        "term": "data-* attribute",
        "definition": "Maxsus ma'lumotlarni saqlash uchun mo'ljallangan HTML atributi."
      },
      {
        "term": "dataset property",
        "definition": "Elementning barcha `data-*` atributlariga `JavaScript` orqali kirish imkonini beruvchi DOM xususiyati."
      },
      {
        "term": "Custom Data",
        "definition": "Standart HTML atributlari bilan ifodalanmagan, dasturchi tomonidan belgilangan ma'lumot."
      }
    ]
  },
  {
    "id": "html-q13",
    "question": "HTML `head` `tag`i ichiga qanday elementlar joylashtiriladi?",
    "topic": "HTML Structure",
    "description": "`<head>` bo'limi `HTML` hujjati haqida `metadata` saqlaydi va sahifada ko'rsatilmaydigan muhim elementlarni o'z ichiga oladi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`<head>` elementi `HTML` hujjatining 'miya' qismi bo'lib, uning ichidagi ma'lumotlar to'g'ridan-to'g'ri sahifada ko'rsatilmaydi (faqat `<title>` bundan mustasno), lekin brauzer, qidiruv tizimlari va boshqa dasturlar uchun muhimdir."
      },
      {
        "title": "Eng Ko'p Ishlatiladigan Elementlar:",
        "type": "list",
        "items": [
          "**`<title>`:** Sahifaning sarlavhasini belgilaydi. Bu sarlavha brauzerning `tab`ida, `bookmark`'larda va qidiruv natijalarida ko'rinadi. Har bir `HTML` hujjatida **bittadan bo'lishi shart**.",
          "**`<meta>`:** Hujjat haqida turli xil `metadata`'larni beradi. Eng muhimlari: `<meta charset=\"UTF-8\">` (belgilar kodirovkasi), `<meta name=\"viewport\" ...>` (mobil qurilmalar uchun sozlama), `<meta name=\"description\" ...>` (sahifa tavsifi), `<meta name=\"keywords\" ...>` (kalit so'zlar - `SEO` uchun ahamiyati kamaygan).",
          "**`<link>`:** Joriy hujjatni boshqa tashqi resurslar bilan bog'laydi. Eng ko'p `CSS` fayllarini ulash (`<link rel=\"stylesheet\" href=\"style.css\">`) va `favicon` (`<link rel=\"icon\" ...>`) belgilash uchun ishlatiladi.",
          "**`<style>`:** `HTML` hujjati ichiga to'g'ridan-to'g'ri (`internal`) `CSS` qoidalarini yozish uchun ishlatiladi (lekin `CSS`'ni alohida faylda saqlash tavsiya etiladi).",
          "**`<script>`:** `JavaScript` kodini `HTML` ichiga yozish yoki tashqi `.js` fayllarni ulash uchun ishlatiladi (garchi `<script>`'ni `<body>`'ning oxiriga joylashtirish `performance` uchun yaxshiroq bo'lsa ham).",
          "**`<base>`:** Sahifadagi barcha nisbiy `URL`'lar uchun asosiy `URL`'ni belgilaydi (kam ishlatiladi)."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Namuna `<head>` Bo'limi:",
        "code": [
          "<head>",
          "  <meta charset=\"UTF-8\">",
          "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
          "  <meta name=\"description\" content=\"Bu sahifa HTML head elementlari haqida.\">",
          "  <title>Head Elementlari</title>",
          "  <link rel=\"stylesheet\" href=\"/css/main.css\">",
          "  <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">",
          "</head>"
        ]
      }
    ],
    "interviewAnswer": "`<head>` bo'limi sahifa haqida `metadata` saqlaydi. Unga `<title>` (brauzer tab sarlavhasi), `<meta>` (`charset`, `viewport`, `description`), `<link>` (asosan `CSS` uchun), `<style>` (ichki `CSS`) va `<script>` (JavaScript) kabi elementlar joylashtiriladi. Uning mazmuni to'g'ridan-to'g'ri sahifada ko'rsatilmaydi.",
    "keyTerms": [
      {
        "term": "<head>",
        "definition": "HTML hujjatining metadata va resurs havolalarini saqlaydigan bo'limi."
      },
      {
        "term": "Metadata",
        "definition": "Ma'lumotlar haqidagi ma'lumot (masalan, sahifa tavsifi, kodirovkasi)."
      },
      {
        "term": "<title>",
        "definition": "Brauzer tabida va qidiruv natijalarida ko'rinadigan sahifa sarlavhasi."
      },
      {
        "term": "<meta>",
        "definition": "Turli xil metadata'larni belgilash uchun ishlatiladigan tag."
      },
      {
        "term": "<link>",
        "definition": "Tashqi resurslarni (CSS, favicon) joriy hujjatga bog'lovchi tag."
      }
    ]
  },
  {
    "id": "html-q14",
    "question": "`iframe` nima va u qachon ishlatiladi?",
    "topic": "HTML Elements",
    "description": "`<iframe>` (Inline Frame) joriy HTML hujjati ichiga boshqa bir HTML hujjatini joylashtirish imkonini beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`<iframe>` o'zining alohida brauzer kontekstiga ega bo'lgan 'ichki oyna' yaratadi. Bu sizga boshqa veb-saytdan kontentni (masalan, video, xarita, reklama) o'z sahifangizga joylashtirish imkonini beradi."
      },
      {
        "title": "Asosiy Atributlar:",
        "type": "list",
        "items": [
          "`src`: Ichki hujjatning `URL` manzili.",
          "`width`, `height`: `iframe`'ning o'lchamlari.",
          "`frameborder`: Chegara chizig'ini ko'rsatish/yashirish (eskirgan, `CSS` bilan qilish tavsiya etiladi).",
          "`allowfullscreen`: Ichki kontentni to'liq ekranga chiqarishga ruxsat berish.",
          "`sandbox`: Xavfsizlikni oshirish uchun `iframe` ichidagi kontentning imkoniyatlarini (masalan, skriptlarni ishga tushirish, formalar yuborish) cheklash.",
          "`allow`: Muayyan brauzer xususiyatlariga (`camera`, `microphone`, `geolocation`) kirishga ruxsat berish."
        ]
      },
      {
        "type": "paragraph",
        "content": "`iframe`'lar xavfsizlik nuqtai nazaridan (`clickjacking` hujumlari) ehtiyotkorlik bilan ishlatilishi kerak. `sandbox` va `allow` atributlari bu xavflarni kamaytirishga yordam beradi."
      }
    ],
    "codeExamples": [
      {
        "title": "Google Maps Joylashtirish:",
        "code": [
          "<iframe ",
          "  src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d...\"",
          "  width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\">",
          "</iframe>"
        ]
      }
    ],
    "interviewAnswer": "`iframe` bir HTML sahifasi ichiga boshqa bir HTML sahifasini (boshqa saytdan ham) joylashtirish uchun ishlatiladi. Masalan, `YouTube` videosi, `Google Maps`, reklama bannerlarini saytga qo'shish uchun. `src` atributi ichki sahifaning manzilini ko'rsatadi. Xavfsizlik uchun `sandbox` atributi muhim.",
    "keyTerms": [
      {
        "term": "<iframe>",
        "definition": "Boshqa HTML hujjatini joriy hujjat ichiga joylashtiruvchi tag."
      },
      {
        "term": "Embed",
        "definition": "Biror kontentni boshqa kontent ichiga joylashtirish."
      },
      {
        "term": "Sandbox Attribute",
        "definition": "`iframe` ichidagi kontentning imkoniyatlarini xavfsizlik uchun cheklovchi atribut."
      },
      {
        "term": "Clickjacking",
        "definition": "Foydalanuvchini aldab, ko'rinmas `iframe` ustidagi elementni bosishga majbur qilish orqali amalga oshiriladigan hujum turi."
      }
    ]
  },
  {
    "id": "html-q15",
    "question": "HTML5 da qanday yangi `input` turlari (`types`) qo'shilgan?",
    "topic": "HTML Forms",
    "description": "HTML5 `<input>` uchun `email`, `url`, `number`, `date`, `color`, `range`, `search` kabi ko'plab yangi `type`'larni qo'shgan.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Bu yangi `input` turlari foydalanuvchidan ma'lumot olishni osonlashtiradi va brauzer tomonidan o'rnatilgan ma'lumot tekshiruvini (`validation`) ta'minlaydi. Shuningdek, ular mobil qurilmalarda mos keladigan maxsus klaviaturalarni (masalan, `type=\"email\"` uchun `@` belgisi bor klaviatura) chiqarishga yordam beradi."
      },
      {
        "title": "Ba'zi Muhim Yangi Turlar:",
        "type": "list",
        "items": [
          "`email`: Email manzili formatini tekshiradi.",
          "`url`: URL manzili formatini tekshiradi.",
          "`number`: Faqat raqam kiritishga ruxsat beradi. `min`, `max`, `step` atributlari bilan ishlashi mumkin.",
          "`tel`: Telefon raqami kiritish uchun (formatni tekshirmaydi, lekin mobil klaviaturani chiqaradi).",
          "`date`: Sana tanlash uchun kalendar chiqaradi.",
          "`time`: Vaqt tanlash uchun interfeys chiqaradi.",
          "`datetime-local`: Sana va vaqtni birgalikda tanlash uchun.",
          "`month`: Oy va yil tanlash uchun.",
          "`week`: Hafta va yil tanlash uchun.",
          "`color`: Rang tanlash vositasini chiqaradi.",
          "`range`: Qiymatlar oralig'ida siljitish mumkin bo'lgan `slider` yaratadi.",
          "`search`: Qidiruv maydoni ekanligini bildiradi (ba'zan 'x' tozalash tugmasi paydo bo'ladi)."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Yangi Input Turlari Misollari:",
        "code": [
          "<label for=\"email\">Email:</label>",
          "<input type=\"email\" id=\"email\" name=\"email\" required>",
          "",
          "<label for=\"quantity\">Miqdor (1-5):</label>",
          "<input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\">",
          "",
          "<label for=\"meeting-date\">Uchrashuv Sanasi:</label>",
          "<input type=\"date\" id=\"meeting-date\" name=\"meeting_date\">"
        ]
      }
    ],
    "interviewAnswer": "HTML5 `email`, `url`, `number`, `date`, `time`, `color`, `range`, `search` kabi ko'plab yangi `input` turlarini qo'shgan. Ular brauzer tomonidan o'rnatilgan validatsiyani ta'minlaydi (masalan, email formati) va mobil qurilmalarda mos klaviaturalarni chiqarishga yordam beradi.",
    "keyTerms": [
      {
        "term": "Input Type",
        "definition": "`<input>` elementining qanday ma'lumot qabul qilishini va qanday ko'rinishini belgilaydigan atribut."
      },
      {
        "term": "Validation",
        "definition": "Foydalanuvchi kiritgan ma'lumotlarning to'g'riligini tekshirish jarayoni."
      },
      {
        "term": "Attribute",
        "definition": "HTML elementiga qo'shimcha ma'lumot yoki sozlama beruvchi nom/qiymat juftligi."
      }
    ]
  },
  {
    "id": "html-q16",
    "question": "HTML da `block` va `inline` elementlar o'rtasida qanday farq bor?",
    "topic": "HTML Display",
    "description": "Asosiy farq ularning sahifadagi joylashuvi va o'lchamlarni qanday qabul qilishidadir.",
    "detailedExplanation": [
      {
        "title": "`Block-level` elementlar:",
        "type": "list",
        "items": [
          "Har doim **yangi qatordan** boshlanadi.",
          "Odatda o'z `parent` elementining **to'liq kengligini** egallaydi.",
          "`width`, `height`, `margin` (yuqori/pastki ham), `padding` xususiyatlarini to'liq qabul qiladi.",
          "Misollar: `<div>`, `<h1>`-`<h6>`, `<p>`, `<ul>`, `<ol>`, `<li>`, `<form>`, `<header>`, `<footer>`, `<section>`."
        ]
      },
      {
        "title": "`Inline-level` elementlar:",
        "type": "list",
        "items": [
          "**Yangi qatordan boshlanmaydi**, matn oqimi ichida qoladi.",
          "Faqat o'z **kontenti egallagan kenglikni** oladi.",
          "`width`, `height`, `margin-top`, `margin-bottom` xususiyatlari ularga **ta'sir qilmaydi** (yoki kutilgandek ishlamaydi). `padding`, `margin-left`, `margin-right`, `border` esa ta'sir qiladi.",
          "Misollar: `<span>`, `<a>`, `<img>`, `<strong>`, `<em>`, `<input>`, `<button>`, `<label>`."
        ]
      },
      {
        "type": "paragraph",
        "content": "Yana bir muhim qiymat `display: inline-block;` bo'lib, u elementni `inline` kabi qator ichida qoldiradi, lekin `block` kabi `width`, `height`, `margin-top/bottom` berish imkonini yaratadi."
      }
    ],
    "codeExamples": [
      {
        "title": "Misol:",
        "code": [
          "<div style=\"border: 1px solid red;\">Men blok elementman.</div>",
          "<p style=\"border: 1px solid blue;\">",
          "  Men paragrafman (blok), va ichimda ",
          "  <span style=\"border: 1px solid green;\">inline element</span> bor.",
          "</p>"
        ]
      }
    ],
    "interviewAnswer": "`block` elementlar yangi qatordan boshlanadi va to'liq kenglikni egallaydi (`div`, `p`, `h1`), `width`/`height` oladi. `inline` elementlar qator ichida qoladi va faqat o'z kontenti kengligini egallaydi (`span`, `a`, `img`), `width`/`height` olmaydi. `inline-block` esa qator ichida qolib, `width`/`height` oladi.",
    "keyTerms": [
      {
        "term": "Block-level",
        "definition": "Yangi qatordan boshlanadigan va to'liq kenglikni egallaydigan element turi."
      },
      {
        "term": "Inline-level",
        "definition": "Matn oqimi ichida qoladigan element turi."
      },
      {
        "term": "Inline-block",
        "definition": "Qator ichida qoladigan, lekin blok element kabi o'lcham oladigan element turi."
      },
      {
        "term": "display Property",
        "definition": "Elementning qanday ko'rsatilishini belgilaydigan CSS xususiyati."
      }
    ]
  },
  {
    "id": "html-q17",
    "question": "`figure` va `figcaption` elementlari nima uchun ishlatiladi?",
    "topic": "HTML5 Semantics",
    "description": "`<figure>` va `<figcaption>` mustaqil kontentni (rasm, kod) va uning izohini semantik jihatdan to'g'ri belgilash uchun ishlatiladi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`HTML5`'dan oldin rasmlar va ularning izohlari ko'pincha oddiy `<div>` yoki `<p>` `tag`lari bilan belgilangan. Semantik `tag`lar bu strukturani aniqroq qiladi."
      },
      {
        "type": "list",
        "items": [
          "**`<figure>`:** O'z-o'zidan mustaqil, asosiy matndan ajratib olish yoki boshqa joyga ko'chirish mumkin bo'lgan kontentni o'raydi. Bu odatda `<img>` (rasm), lekin `<pre>` (kod bloki), `<blockquote>` (iqtibos), diagramma yoki bir nechta elementlar guruhi bo'lishi ham mumkin.",
          "**`<figcaption>`:** `<figure>` ichida joylashgan (birinchisi yoki oxirgisi bo'lishi mumkin) va o'sha `<figure>` ichidagi kontent uchun sarlavha, izoh yoki afsona (`legend`) beradi. Bitta `<figure>` ichida faqat **bittadan** `<figcaption>` bo'lishi tavsiya etiladi."
        ]
      },
      {
        "type": "paragraph",
        "content": "Bu `tag`lardan foydalanish `screen reader`'larga rasm va uning izohini bog'lashga yordam beradi (`accessibility`) va kodning ma'nosini oshiradi."
      }
    ],
    "codeExamples": [
      {
        "title": "Rasm va uning izohi:",
        "code": [
          "<figure>",
          "  <img src=\"/images/cat.jpg\" alt=\"Stolda uxlayotgan mushuk\">",
          "  <figcaption>1-rasm: Uy mushugi tushlikdan keyin dam olmoqda.</figcaption>",
          "</figure>"
        ]
      },
      {
        "title": "Kod bloki va uning izohi:",
        "code": [
          "<figure>",
          "  <figcaption>Kod namunasi: JavaScript'da 'Hello World'</figcaption>",
          "  <pre><code>console.log('Hello World!');</code></pre>",
          "</figure>"
        ]
      }
    ],
    "interviewAnswer": "`<figure>` rasm, diagramma yoki kod kabi mustaqil kontentni o'rash uchun ishlatiladi. `<figcaption>` esa `<figure>` ichida joylashib, o'sha kontentga sarlavha yoki izoh beradi. Bu semantika va `accessibility` uchun muhim.",
    "keyTerms": [
      {
        "term": "<figure>",
        "definition": "Mustaqil kontent blokini (rasm, kod) belgilovchi semantik tag."
      },
      {
        "term": "<figcaption>",
        "definition": "`<figure>` ichidagi kontent uchun sarlavha yoki izohni belgilovchi tag."
      },
      {
        "term": "Self-contained content",
        "definition": "Asosiy matndan ajratib olish yoki boshqa joyga ko'chirish mumkin bo'lgan kontent."
      }
    ]
  },
  {
    "id": "html-q18",
    "question": "HTML `meta` `tag`lari nima va ularning ba'zi muhim qo'llanilishlari qanday?",
    "topic": "HTML Head",
    "description": "`<meta>` `tag`lari `<head>` ichida sahifa haqida brauzer yoki qidiruv tizimlari uchun `metadata` (qo'shimcha ma'lumot) beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`<meta>` `tag`lari odatda `name` va `content` atributlari yoki `charset` yoki `http-equiv` atributlari bilan ishlatiladi. Ular sahifaning o'zida ko'rinmaydi, lekin uning qanday ishlashi yoki qanday tavsiflanishiga ta'sir qiladi."
      },
      {
        "title": "Muhim Qo'llanilishlar:",
        "type": "list",
        "items": [
          "**Belgilar Kodirovkasi (`Character Encoding`):** `<meta charset=\"UTF-8\">` — Sahifadagi matnlar qaysi kodirovkada ekanligini brauzerga aytadi. `UTF-8` deyarli barcha belgilarni qo'llab-quvvatlaydigan standart hisoblanadi va har doim birinchi `meta` `tag` bo'lishi kerak.",
          "**`Viewport` Sozlamasi:** `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` — Mobil qurilmalarda sahifaning masshtabini va kengligini to'g'ri sozlash uchun juda muhim (`responsive design`).",
          "**Sahifa Tavsifi (`Description`):** `<meta name=\"description\" content=\"Sahifaning qisqacha tavsifi...\">` — Qidiruv tizimlari natijalarida sahifa `link`i ostida ko'rsatiladigan qisqa matn (`snippet`). `SEO` uchun muhim.",
          "**Kalit So'zlar (`Keywords`):** `<meta name=\"keywords\" content=\"kalit, so'z, ro'yxati\">` — Sahifaga tegishli kalit so'zlar. Hozirgi kunda ko'pchilik qidiruv tizimlari (ayniqsa `Google`) bu `tag`ga deyarli ahamiyat bermaydi.",
          "**Muallif (`Author`):** `<meta name=\"author\" content=\"Muallif Ismi\">` — Sahifa muallifini ko'rsatadi.",
          "**Avtomatik Yangilash/Yo'naltirish:** `<meta http-equiv=\"refresh\" content=\"5;url=http://example.com/\">` — Sahifani 5 soniyadan keyin boshqa `URL`'ga yo'naltiradi (odatda tavsiya etilmaydi)."
        ]
      }
    ],
    "interviewAnswer": "`<meta>` `tag`lari `<head>` ichida sahifa haqida qo'shimcha ma'lumot (`metadata`) beradi. Eng muhimlari: `charset=\"UTF-8\"` (belgilar kodirovkasi), `name=\"viewport\"` (mobil moslashuv), `name=\"description\"` (SEO uchun tavsif).",
    "keyTerms": [
      {
        "term": "<meta>",
        "definition": "Hujjat haqida metadata belgilovchi HTML tag."
      },
      {
        "term": "charset",
        "definition": "Hujjatning belgilar kodirovkasini belgilaydigan atribut."
      },
      {
        "term": "viewport",
        "definition": "Mobil qurilmalarda sahifaning ko'rinish maydoni va masshtabini boshqarish uchun ishlatiladigan `meta` tag `name` qiymati."
      },
      {
        "term": "description",
        "definition": "Sahifa mazmunining qisqacha tavsifini berish uchun ishlatiladigan `meta` tag `name` qiymati."
      }
    ]
  },
  {
    "id": "html-q19",
    "question": "`canvas` va `svg` o'rtasida qanday farq bor?",
    "topic": "HTML Graphics",
    "description": "Ikkalasi ham vebda grafikalar chizish uchun, ammo turli texnologiyalar va maqsadlar uchun.",
    "detailedExplanation": [
      {
        "title": "`<canvas>`:",
        "type": "list",
        "items": [
          "**Texnologiya:** `JavaScript` orqali boshqariladigan **pikselli (`bitmap`/`raster`)** grafika maydoni.",
          "**Chizish:** `JavaScript API` (`getContext('2d')`) yordamida shakllar, chiziqlar, rasmlar piksellar darajasida chiziladi.",
          "**DOM:** Chizilgan obyektlar `DOM`'ning bir qismi emas. Ularga alohida stil berib yoki `event` bog'lab bo'lmaydi.",
          "**Masshtablash:** O'lchami kattalashtirilganda sifati yo'qolishi (`pixelation`) mumkin.",
          "**Qo'llanilishi:** Dinamik grafikalar, animatsiyalar, o'yinlar, rasmlarni qayta ishlash kabi ko'p sonli yoki tez o'zgaruvchan elementlar uchun yaxshi.",
          "**`Performance`:** Ko'p sonli elementlar uchun odatda `SVG`'dan tezroq."
        ]
      },
      {
        "title": "`SVG` (Scalable Vector Graphics):",
        "type": "list",
        "items": [
          "**Texnologiya:** `XML`'ga asoslangan **vektorli** grafika formati.",
          "**Chizish:** Shakllar (`<circle>`, `<rect>`, `<path>`) `XML tag`lari orqali tavsiflanadi.",
          "**DOM:** Har bir `SVG` elementi `DOM`'ning bir qismi hisoblanadi. Ularga `CSS` bilan stil berish va `JavaScript` bilan `event listener`'lar qo'shish mumkin.",
          "**Masshtablash:** O'lchami o'zgarganda **sifatini yo'qotmaydi** (cheksiz masshtablanadi).",
          "**Qo'llanilishi:** Logotiplar, ikonlar, interfeys elementlari, diagrammalar, xaritalar kabi aniq, sifati muhim bo'lgan va interaktiv bo'lishi mumkin bo'lgan grafikalar uchun ideal.",
          "**`Performance`:** Juda ko'p sonli elementlar bo'lganda `canvas`'ga qaraganda sekinroq ishlashi mumkin."
        ]
      }
    ],
    "interviewAnswer": "`Canvas` `JavaScript` bilan piksellar (`bitmap`) chizadi, dinamik grafikalar/o'yinlar uchun yaxshi, `DOM`'ga bog'liq emas, kattalashtirganda sifati yo'qolishi mumkin. `SVG` `XML`'ga asoslangan vektorli format, `DOM`'ning bir qismi (`CSS`/`JS` bilan ishlaydi), o'lchami o'zgarganda sifatini yo'qotmaydi, logotip/ikonlar uchun yaxshi.",
    "keyTerms": [
      {
        "term": "<canvas>",
        "definition": "JavaScript yordamida pikselli grafika chizish uchun HTML elementi."
      },
      {
        "term": "SVG",
        "definition": "Scalable Vector Graphics - XML'ga asoslangan vektorli grafika formati."
      },
      {
        "term": "Bitmap (Raster)",
        "definition": "Tasvirni piksellar to'plami sifatida ifodalaydigan grafika turi."
      },
      {
        "term": "Vector",
        "definition": "Tasvirni geometrik shakllar (chiziqlar, egri chiziqlar) formulalari yordamida ifodalaydigan grafika turi."
      }
    ]
  },
  {
    "id": "html-q20",
    "question": "HTML `accessibility` (A11y) nima va u nima uchun muhim?",
    "topic": "HTML Accessibility",
    "description": "`Accessibility` veb-kontentni imkoniyati cheklangan odamlar ham ishlata olishini ta'minlash amaliyotidir.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`a11y` (birinchi va oxirgi harf orasida 11 ta harf) — bu barcha foydalanuvchilar, ularning qobiliyatlaridan qat'iy nazar (masalan, ko'rish, eshitish, harakatlanish yoki kognitiv cheklovlari bo'lganlar), veb-saytlar va dasturlardan foydalana olishlarini ta'minlashga qaratilgan dizayn va ishlab chiqish tamoyilidir."
      },
      {
        "title": "Nima Uchun Muhim?",
        "type": "list",
        "items": [
          "**Axloqiy Sabablar:** Hamma uchun teng imkoniyatlar yaratish.",
          "**Qonuniy Talablar:** Ko'plab mamlakatlarda veb-saytlar ma'lum `accessibility` standartlariga (masalan, `WCAG` - Web Content Accessibility Guidelines) javob berishi qonuniy talab qilinadi.",
          "**Kengroq Auditoriya:** Imkoniyati cheklangan millionlab odamlarni ham o'z ichiga olgan kengroq foydalanuvchilar doirasiga erishish.",
          "**Yaxshilangan `SEO`:** `Accessibility` uchun qilingan ko'plab amaliyotlar (semantik `HTML`, `alt` matnlari) qidiruv tizimlari uchun ham foydalidir.",
          "**Yaxshilangan `Usability`:** `Accessibility`'ni yaxshilaydigan ko'plab amaliyotlar (aniq struktura, klaviatura navigatsiyasi) barcha foydalanuvchilar uchun qulaylikni oshiradi."
        ]
      },
      {
        "title": "HTML'dagi Asosiy Amaliyotlar:",
        "type": "list",
        "items": [
          "**Semantik HTML'dan foydalanish:** (`<header>`, `<nav>`, `<button>`, va hokazo).",
          "Barcha rasmlar uchun mazmunli **`alt` atributlarini** taqdim etish.",
          "Barcha `form` elementlari uchun **`<label>`**'lardan to'g'ri foydalanish.",
          "Sahifaning mantiqiy **sarlavha (`h1`-`h6`) ierarxiyasini** yaratish.",
          "Kontentga **klaviatura orqali** to'liq kirish imkoniyatini ta'minlash.",
          "Havolalar (`<a>`) matnining aniq bo'lishini ta'minlash ('batafsil' o'rniga 'Xizmatlarimiz haqida batafsil').",
          "Kerak bo'lganda **`ARIA` (Accessible Rich Internet Applications) atributlaridan** foydalanish."
        ]
      }
    ],
    "interviewAnswer": "`Accessibility` (a11y) vebni hamma, jumladan imkoniyati cheklangan odamlar ham ishlata olishini ta'minlashdir. Bu axloqiy, qonuniy va `SEO` uchun muhim. HTML'da bunga semantik `tag`'lar, `alt` matnlari, `label`'lar va klaviatura navigatsiyasini ta'minlash orqali erishiladi.",
    "keyTerms": [
      {
        "term": "Accessibility (a11y)",
        "definition": "Veb-kontentni barcha foydalanuvchilar (shu jumladan imkoniyati cheklanganlar) uchun qulay qilish."
      },
      {
        "term": "WCAG",
        "definition": "Web Content Accessibility Guidelines - Veb-kontent uchun accessibility standartlari."
      },
      {
        "term": "Screen Reader",
        "definition": "Ekrandagi matnni ovoz chiqarib o'qiydigan yordamchi texnologiya."
      },
      {
        "term": "ARIA",
        "definition": "Accessible Rich Internet Applications - Dinamik kontent va `widget`'larni yordamchi texnologiyalar uchun tushunarliroq qilish uchun atributlar to'plami."
      }
    ]
  },
  {
    "id": "html-q21",
    "question": "HTML jadval (`<table>`) elementlarining asosiy `tag`lari qaysilar?",
    "topic": "HTML Tables",
    "description": "HTML jadvallari ma'lumotlarni qatorlar va ustunlar ko'rinishida taqdim etadi va bir nechta asosiy `tag`lardan tashkil topadi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Jadval yaratish uchun bir nechta maxsus HTML `tag`lari birgalikda ishlatiladi. Ular ma'lumotlarni tartibli struktura bilan ko'rsatishga yordam beradi."
      },
      {
        "title": "Asosiy Jadval Taglari:",
        "type": "list",
        "items": [
          "`<table>`: Butun jadval uchun asosiy konteyner.",
          "`<thead>`: Jadvalning sarlavha qismini guruhlaydi.",
          "`<tbody>`: Jadvalning asosiy ma'lumotlar qismini guruhlaydi.",
          "`<tfoot>`: Jadvalning yakuniy qismini guruhlaydi (ixtiyoriy).",
          "`<tr>`: Jadval ichidagi bitta qatorni (`table row`) belgilaydi.",
          "`<th>`: Jadval sarlavhasi katakchasini (`table header cell`) belgilaydi (odatda `<thead>` ichida).",
          "`<td>`: Jadval ma'lumot katakchasini (`table data cell`) belgilaydi (odatda `<tbody>` ichida)."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Oddiy Jadval:",
        "code": [
          "<table>",
          " <thead>",
          "  <tr><th>Ism</th><th>Yosh</th></tr>",
          " </thead>",
          " <tbody>",
          "  <tr><td>Ali</td><td>30</td></tr>",
          " </tbody>",
          "</table>"
        ]
      }
    ],
    "interviewAnswer": "Asosiy jadval `tag`lari: `<table>` (asosiy konteyner), `<thead>` (sarlavha), `<tbody>` (asosiy qism), `<tr>` (qator), `<th>` (sarlavha katakchasi), `<td>` (ma'lumot katakchasi). `<tfoot>` (yakuniy qism) ham bor.",
    "keyTerms": [
      {
        "term": "<table>",
        "definition": "HTML jadvalini boshlaydigan asosiy `tag`."
      },
      {
        "term": "<tr>",
        "definition": "Jadval ichidagi bitta qatorni belgilaydigan `tag`."
      },
      {
        "term": "<th>",
        "definition": "Jadval sarlavhasi katakchasini belgilaydigan `tag`."
      },
      {
        "term": "<td>",
        "definition": "Jadval ma'lumot katakchasini belgilaydigan `tag`."
      },
      {
        "term": "<thead>",
        "definition": "Jadval sarlavhasi qatorlarini guruhlaydigan `tag`."
      },
      {
        "term": "<tbody>",
        "definition": "Jadvalning asosiy ma'lumot qatorlarini guruhlaydigan `tag`."
      }
    ]
  },
  {
    "id": "html-q22",
    "question": "`colspan` va `rowspan` atributlari nima uchun ishlatiladi?",
    "topic": "HTML Tables",
    "description": "`colspan` va `rowspan` atributlari jadval katakchalariga (`<th>` yoki `<td>`) bir nechta ustun yoki qatorni egallash imkonini beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Murakkab jadvallarda ba'zan bitta katakcha bir nechta ustun yoki qator bo'ylab yoyilishi kerak bo'ladi."
      },
      {
        "type": "list",
        "items": [
          "`colspan=\"raqam\"`: Katakchaga `raqam` miqdoricha **ustunni** birlashtirishni buyuradi.",
          "`rowspan=\"raqam\"`: Katakchaga `raqam` miqdoricha **qatorni** birlashtirishni buyuradi. Pastdagi qatorlarda shu ustun uchun katakcha yozilmaydi."
        ]
      }
    ],
    "codeExamples": [
      {
        "title": "Misol:",
        "code": [
          "<td colspan=\"2\">Ikki ustun</td>",
          "<td rowspan=\"3\">Uch qator</td>"
        ]
      }
    ],
    "interviewAnswer": "`colspan` katakchaga bir nechta ustunni birlashtirishga, `rowspan` esa bir nechta qatorni birlashtirishga imkon beradi. Ular murakkab jadval tuzilmalarini yaratishda ishlatiladi.",
    "keyTerms": [
      {
        "term": "colspan",
        "definition": "Jadval katakchasi nechta ustunni egallashini belgilaydigan atribut."
      },
      {
        "term": "rowspan",
        "definition": "Jadval katakchasi nechta qatorni egallashini belgilaydigan atribut."
      }
    ]
  },
  {
    "id": "html-q23",
    "question": "`GET` so'rovida `URL` parametrlarini qanday yuborish mumkin?",
    "topic": "HTML Forms & URLs",
    "description": "`GET` so'rovida parametrlar (`key=value`) `URL`'ning oxiriga `query string` (`?key=value&...`) sifatida qo'shib yuboriladi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`Query string` `?` bilan boshlanadi, parametrlar `&` bilan ajratiladi. Maxsus belgilar `URL encoding` qilinadi. Bu `method=\"GET\"` formalarida avtomatik yoki `JavaScript`/`<a>` `tag`ida qo'lda qilinadi."
      }
    ],
    "codeExamples": [
      { "title": "URL:", "code": ["/search?q=javascript&sort=popular"] },
      {
        "title": "Form:",
        "code": [
          "<form action=\"/search\" method=\"GET\"><input name=\"q\"><button>OK</button></form>"
        ]
      }
    ],
    "interviewAnswer": "`GET` so'rovida parametrlar `URL`'ning oxiriga `?` belgisidan keyin `kalit=qiymat` ko'rinishida qo'shiladi. Bir nechta parametrlar `&` belgisi bilan ajratiladi. Masalan: `search?q=test&page=2`.",
    "keyTerms": [
      {
        "term": "GET Method",
        "definition": "Ma'lumotlarni URL manziliga `query string` sifatida qo'shib yuborish usuli."
      },
      {
        "term": "URL Parameter",
        "definition": "URL orqali serverga yuboriladigan `kalit=qiymat` juftligi."
      },
      {
        "term": "Query String",
        "definition": "URL'ning `?` belgisidan keyingi qismi, GET parametrlarini saqlaydi."
      }
    ]
  },
  {
    "id": "html-q24",
    "question": "`viewport` `meta` `tag`i nima uchun kerak?",
    "topic": "HTML Head & Responsive Design",
    "description": "`<meta name=\"viewport\" ...>` brauzerga veb-sahifani mobil qurilmalar ekranlariga qanday moslashtirishni aytadi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "`content=\"width=device-width, initial-scale=1.0\"` qiymati brauzerga sahifa kengligini qurilma kengligiga tenglashni (`width=device-width`) va boshlang'ich masshtabni 100% qilishni (`initial-scale=1.0`) buyuradi. Bu `responsive design`'ning to'g'ri ishlashi uchun juda muhim."
      }
    ],
    "codeExamples": [
      {
        "title": "Standart sozlama:",
        "code": [
          "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
        ]
      }
    ],
    "interviewAnswer": "`viewport` `meta` `tag`i (`width=device-width, initial-scale=1.0`) brauzerga sahifani mobil qurilma ekraniga moslashtirishni va boshlang'ich masshtabni 100% qilishni aytadi. `Responsive design` uchun muhim.",
    "keyTerms": [
      {
        "term": "Viewport",
        "definition": "Veb-sahifaning foydalanuvchiga ko'rinadigan maydoni."
      },
      {
        "term": "Responsive Design",
        "definition": "Sayt dizaynini turli ekran o'lchamlariga moslashtirish."
      },
      { "term": "device-width", "definition": "Qurilma ekranining kengligi." },
      {
        "term": "initial-scale",
        "definition": "Sahifaning boshlang'ich masshtabi."
      }
    ]
  },
  {
    "id": "html-q25",
    "question": "HTML5 `audio` va `video` elementlari qanday ishlatiladi?",
    "topic": "HTML Media",
    "description": "`<audio>` va `<video>` `tag`lari `plugin`'siz audio/video joylashtirish imkonini beradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Asosiy atributlar: `src` (fayl manzili), `controls` (boshqaruv paneli), `autoplay`, `loop`, `muted`, `preload`, `width`/`height` (video uchun), `poster` (video uchun). Turli formatlarni qo'llab-quvvatlash uchun ichiga bir nechta `<source src=\"...\" type=\"...\">` `tag`ini joylashtirish mumkin."
      }
    ],
    "codeExamples": [
      {
        "title": "Video:",
        "code": [
          "<video controls width=\"300\"><source src=\"f.mp4\" type=\"video/mp4\"><source src=\"f.webm\" type=\"video/webm\">Brauzer qo'llab-quvvatlamaydi.</video>"
        ]
      },
      {
        "title": "Audio:",
        "code": [
          "<audio controls><source src=\"a.mp3\" type=\"audio/mpeg\">Brauzer qo'llab-quvvatlamaydi.</audio>"
        ]
      }
    ],
    "interviewAnswer": "`<audio>` va `<video>` `plugin`'siz media joylashtirish uchun. `src` faylni, `controls` boshqaruvni ko'rsatadi. Turli formatlar uchun `<source>` ishlatiladi. `autoplay`, `loop`, `muted` atributlari bor.",
    "keyTerms": [
      {
        "term": "<audio>",
        "definition": "Audio kontent uchun HTML5 elementi."
      },
      {
        "term": "<video>",
        "definition": "Video kontent uchun HTML5 elementi."
      },
      {
        "term": "controls",
        "definition": "Standart media boshqaruv elementlarini ko'rsatuvchi atribut."
      },
      {
        "term": "<source>",
        "definition": "Bir nechta media format variantlarini ko'rsatish uchun tag."
      }
    ]
  },
  {
    "id": "html-q26",
    "question": "`href` va `src` atributlari o'rtasida qanday farq bor?",
    "topic": "HTML Attributes",
    "description": "Ikkalasi ham resursga yo'l ko'rsatadi, ammo `href` havola qiladi, `src` esa joylashtiradi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`href` (Hypertext Reference):** Joriy hujjat va resurs o'rtasida **aloqa** o'rnatadi (`<a>`, `<link>`). Brauzer resursni sahifaga joylashtirmaydi, unga havola qiladi."
      },
      {
        "type": "paragraph",
        "content": "**`src` (Source):** Resursni joriy hujjatga **joylashtiradi (`embed`)** (`<img>`, `<script>`, `<audio>`, `<video>`, `<iframe>`). Brauzer resursni yuklab oladi va sahifaga qo'shadi."
      }
    ],
    "interviewAnswer": "`href` resursga **havola** yaratadi (`<a>`, `<link>`). `src` esa resursni (`<img>`, `<script>`, `<video>`) sahifaga **joylashtiradi**.",
    "keyTerms": [
      {
        "term": "href",
        "definition": "Havola yoki bog'lanadigan resurs manzilini ko'rsatuvchi atribut."
      },
      {
        "term": "src",
        "definition": "Joylashtiriladigan resurs (rasm, skript) manzilini ko'rsatuvchi atribut."
      }
    ]
  },
  {
    "id": "html-q27",
    "question": "`ul`, `ol`, va `dl` ro'yxat turlari o'rtasida qanday farq bor?",
    "topic": "HTML Lists",
    "description": "HTML uch xil ro'yxat turini taqdim etadi: tartiblanmagan (`ul`), tartiblangan (`ol`), va ta'riflar (`dl`).",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`<ul>` (Unordered List):** Tartibi muhim bo'lmagan ro'yxat (odatda nuqtalar bilan). Elementlari `<li>` bilan."
      },
      {
        "type": "paragraph",
        "content": "**`<ol>` (Ordered List):** Tartibi muhim bo'lgan ro'yxat (odatda raqamlar bilan). Elementlari `<li>` bilan."
      },
      {
        "type": "paragraph",
        "content": "**`<dl>` (Description List):** Termin-ta'rif juftliklari ro'yxati. `<dt>` (termin) va `<dd>` (ta'rif) `tag`lari bilan."
      }
    ],
    "codeExamples": [
      {
        "title": "Misollar:",
        "code": [
          "<ul><li>A</li></ul>",
          "<ol><li>1</li></ol>",
          "<dl><dt>Term</dt><dd>Def</dd></dl>"
        ]
      }
    ],
    "interviewAnswer": "`<ul>` tartiblanmagan ro'yxat (nuqtalar). `<ol>` tartiblangan ro'yxat (raqamlar). `<dl>` termin (`<dt>`) va ta'rif (`<dd>`) juftliklari ro'yxati.",
    "keyTerms": [
      { "term": "<ul>", "definition": "Tartiblanmagan ro'yxat." },
      { "term": "<ol>", "definition": "Tartiblangan ro'yxat." },
      { "term": "<dl>", "definition": "Ta'riflar ro'yxati." },
      { "term": "<li>", "definition": "`ul`/`ol` ichidagi ro'yxat elementi." },
      { "term": "<dt>", "definition": "`dl` ichidagi termin." },
      { "term": "<dd>", "definition": "`dl` ichidagi ta'rif." }
    ]
  },
  {
    "id": "html-q28",
    "question": "`button` va `input type=\"submit\"` o'rtasida qanday farq bor?",
    "topic": "HTML Forms",
    "description": "Ikkalasi ham formani yuborishi mumkin, lekin `<button>` ko'proq moslashuvchan.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`<input type=\"submit\">`:** Faqat matnli tugma (`value` atributi bilan). Maqsadi faqat `form` yuborish."
      },
      {
        "type": "paragraph",
        "content": "**`<button>`:** Ichiga boshqa `HTML` (`<img>`, `<span>`) olishi mumkin. `type` atributi (`submit` (standart), `reset`, `button`) orqali turli vazifalarni bajarishi mumkin. `Styling` va kontent uchun qulayroq."
      }
    ],
    "codeExamples": [
      {
        "title": "Misollar:",
        "code": [
          "<input type=\"submit\" value=\"Jo'nat\">",
          "<button type=\"submit\"><img src=\"icon.png\"> Yuborish</button>"
        ]
      }
    ],
    "interviewAnswer": "`input type=\"submit\"` faqat matnli `form` yuboruvchi tugma. `<button>` ichiga boshqa `HTML` olishi mumkin va `type` atributi (`submit`, `reset`, `button`) orqali turli vazifalarni bajaradi. `<button>` moslashuvchanroq.",
    "keyTerms": [
      {
        "term": "<input type=\"submit\">",
        "definition": "Formani yuborish uchun oddiy tugma elementi."
      },
      {
        "term": "<button>",
        "definition": "Ichiga boshqa HTML olishi mumkin bo'lgan tugma elementi."
      },
      {
        "term": "type attribute",
        "definition": "`<button>`'ning vazifasini (`submit`, `reset`, `button`) belgilovchi atribut."
      }
    ]
  },
  {
    "id": "html-q29",
    "question": "`Progressive Enhancement` va `Graceful Degradation` nima?",
    "topic": "Web Development Concepts",
    "description": "Turli brauzerlarda ishlashni ta'minlash strategiyalari.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "**`Progressive Enhancement`:** Asosiy `HTML`'dan boshlab, `CSS` va `JavaScript`'ni qatlam-qatlam qo'shish. Eski brauzerlarda ham asosiy funksiya ishlaydi (tavsiya etilgan)."
      },
      {
        "type": "paragraph",
        "content": "**`Graceful Degradation`:** Avval to'liq versiyani qurib, keyin eski brauzerlar uchun funksionallikni kamaytirish."
      }
    ],
    "interviewAnswer": "`Progressive Enhancement` bazadan boshlab yaxshilaydi (eski brauzerda ham ishlaydi). `Graceful Degradation` to'liqdan boshlab kamaytiradi. `Progressive Enhancement` afzalroq.",
    "keyTerms": [
      {
        "term": "Progressive Enhancement",
        "definition": "Asosiy funksionallikdan boshlab, zamonaviy imkoniyatlarni qatlam-qatlam qo'shish strategiyasi."
      },
      {
        "term": "Graceful Degradation",
        "definition": "To'liq funksionallikdan boshlab, eski brauzerlar uchun imkoniyatlarni kamaytirish strategiyasi."
      }
    ]
  },
  {
    "id": "html-q30",
    "question": "`label` `tag`i nima uchun ishlatiladi?",
    "topic": "HTML Forms & Accessibility",
    "description": "`<label>` `form` elementlari (`input`) uchun yorliq beradi, `usability` va `accessibility`'ni yaxshilaydi.",
    "detailedExplanation": [
      {
        "type": "paragraph",
        "content": "Foydalari: 1) `label`'ni bosish `input`'ga `focus` qiladi (`usability`). 2) `Screen reader`'lar `label`'ni o'qib, `input` nima uchunligini aytadi (`accessibility`). Bog'lash usullari: `for` atributi (`<label for=\"id\">`) va `input`'dagi `id`, yoki `input`'ni `label` ichiga joylashtirish."
      }
    ],
    "codeExamples": [
      {
        "title": "`for` bilan:",
        "code": ["<label for=\"name\">Ism:</label><input id=\"name\">"]
      },
      {
        "title": "Ichiga joylashtirish:",
        "code": ["<label>Email: <input type=\"email\"></label>"]
      }
    ],
    "interviewAnswer": "`label` `form` elementiga yorliq beradi. Uni bosish `input`'ni `focus` qiladi (`usability`) va `screen reader`'lar uchun ma'no beradi (`accessibility`). `for` atributi yoki ichiga joylashtirish bilan bog'lanadi.",
    "keyTerms": [
      {
        "term": "<label>",
        "definition": "Forma elementiga yorliq beruvchi tag."
      },
      {
        "term": "for Attribute",
        "definition": "`label`'ni qaysi `input`'ga (`id` orqali) bog'lashni ko'rsatuvchi atribut."
      },
      {
        "term": "Usability",
        "definition": "Interfeysdan foydalanish qulayligi."
      },
      {
        "term": "Accessibility (a11y)",
        "definition": "Vebni imkoniyati cheklangan odamlar ham ishlata olishini ta'minlash."
      }
    ]
  }
]
